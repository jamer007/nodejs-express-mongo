// Generated by CoffeeScript 2.0.3
(function() {
  var TABLE_CONFIGURATION, Table, compareDates;

  require('colors');

  Table = require('cli-table');

  TABLE_CONFIGURATION = {
    chars: {
      'mid': '',
      'left-mid': '',
      'mid-mid': '',
      'right-mid': '',
      'top': '',
      'top-mid': '',
      'top-left': '',
      'top-right': '',
      'bottom': '',
      'bottom-mid': '',
      'bottom-left': '',
      'bottom-right': '',
      'left': '',
      'right': ''
    }
  };

  compareDates = function(firstDate, secondDate) {
    firstDate = new Date(firstDate);
    secondDate = new Date(secondDate);
    switch (true) {
      case firstDate < secondDate:
        return "=>";
      case firstDate > secondDate:
        return "<=";
      default:
        return "==";
    }
  };

  module.exports = function() {
    var clog, clone, fn, formatedClog, i, len, log, percent, ref, silent, verbose;
    clog = '';
    formatedClog = '';
    verbose = this.options.verbose || this.options.blame;
    silent = this.options.silent;
    ref = this.map.clones;
    fn = function(clone) {
      var firstFile, fragment, secondFile, table;
      table = new Table(TABLE_CONFIGURATION);
      firstFile = clone.firstFile;
      secondFile = clone.secondFile;
      if (verbose) {
        fragment = clone.getLines().split("\n").reduce(function(tbl, current, lineNumber) {
          var firstFileLine, secondFileLine;
          firstFileLine = clone.firstFileStart + lineNumber;
          secondFileLine = clone.secondFileStart + lineNumber;
          if (Object.keys(clone.firstFileAnnotatedCode).length > 0 && clone.firstFileAnnotatedCode[firstFileLine] && clone.secondFileAnnotatedCode[secondFileLine]) {
            tbl.push([firstFileLine, clone.firstFileAnnotatedCode[firstFileLine].author, compareDates(clone.firstFileAnnotatedCode[firstFileLine].date, clone.secondFileAnnotatedCode[secondFileLine].date), secondFileLine, clone.secondFileAnnotatedCode[secondFileLine].author, current.dim]);
          } else {
            tbl.push([firstFileLine, secondFileLine, current.dim]);
          }
          return tbl;
        }, table);
      }
      if (silent === false) {
        clog = `${clog}\n\t- ${firstFile.green.bold}: ${clone.firstFileStart}-${clone.firstFileStart + clone.linesCount}\n\t ${secondFile.green.bold}: ${clone.secondFileStart}-${clone.secondFileStart + clone.linesCount}\n`;
      }
      if (verbose) {
        return clog = `${clog}\n${fragment.toString()}\n`;
      }
    };
    for (i = 0, len = ref.length; i < len; i++) {
      clone = ref[i];
      fn(clone);
    }
    if (silent === false) {
      formatedClog = `\n ${clog}\n\n`;
    }
    percent = this.map.getPercentage();
    log = `Found ${this.map.clones.length} exact clones with ${this.map.numberOfDuplication} duplicated lines in ${this.map.numberOfFiles} files${formatedClog} ${percent}% (${this.map.numberOfDuplication} lines) duplicated lines out of ${this.map.numberOfLines} total lines of code.\n`;
    return log;
  };

}).call(this);
